#!/bin/bash

# Define the root directory for interface file searching (changed to types/ in monorepo root)
# Assuming this script is run from the monorepo root.
SEARCH_ROOT="types"

# Define the output directory for the config file (now using types directory)
CONFIG_OUTPUT_DIR="types"

# Define the config file name and its full path
CONFIG_FILE="$CONFIG_OUTPUT_DIR/ts-to-zod.config.mjs"

# Define the prefix to remove from paths to make them relative to types/
PREFIX_TO_REMOVE="types/"

# ---
# 1. Configuration Array Generation
# ---

# Find all interface files and use awk to format them into JavaScript objects.
CONFIG_ARRAY=$(find "$SEARCH_ROOT" -type f -path '*/interfaces/*.interface.ts' | awk -v prefix="$PREFIX_TO_REMOVE" '
BEGIN {
    # Start the JavaScript array
    print "[";
}
{
    # 1. Get the full input path (e.g., types/src/lib/deep-read/...)
    input_path = $0;

    # Remove the defined prefix to make paths relative to the config file (e.g., src/lib/...)
    # This is crucial for running the generator from within the types directory.
    gsub(prefix, "", input_path); 

    # 2. Get the base file name (e.g., dictionary-entry.interface)
    temp_path = input_path;
    sub(/^.*\/interfaces\//, "", temp_path);
    basename = temp_path;
    sub(/\.ts$/, "", basename);
    
    # 3. Determine the CamelCase name for the config (e.g., dictionaryEntry)
    split(basename, parts, "-");
    name = parts[1];
    for (i = 2; i <= length(parts); i++) {
        # Convert to CamelCase
        name = name toupper(substr(parts[i], 1, 1)) substr(parts[i], 2);
    }
    # Remove the .interface suffix
    sub(/\.interface/, "", name);
    
    # 4. Determine the output path: 
    #    a) Change directory: 'interfaces' -> 'schemas'
    #    b) Change file suffix: '.interface.ts' -> '.schema.ts'
    output_path = input_path; 
    sub(/interfaces/, "schemas", output_path);
    sub(/\.interface\.ts$/, ".schema.ts", output_path);
    
    # 5. Print the JS object
    printf "  {\n";
    printf "    name: \"%s\",\n", name;
    printf "    input: \"%s\",\n", input_path;
    printf "    output: \"%s\",\n", output_path;
    printf "  },\n";
}
END {
    # End the JavaScript array
    print "]";
}')

# ---
# 2. Final Config File Assembly
# ---
# Create the header for the configuration file
echo "/**" > "$CONFIG_FILE"
echo " * Automatically generated by script." >> "$CONFIG_FILE"
echo " * DO NOT EDIT MANUALLY. Use: ./scripts/generate-zod-config.sh" >> "$CONFIG_FILE"
echo " */" >> "$CONFIG_FILE"

# Remove the trailing comma from the last object (a common awk issue)
# Use 'sed -i ""' for macOS compatibility
FINAL_ARRAY=$(echo "$CONFIG_ARRAY" | sed -E '$s/,$//')

# Write the final array to the config file
echo "export default $FINAL_ARRAY;" >> "$CONFIG_FILE"

echo "âœ… Config file $CONFIG_FILE successfully generated!"
echo "Next step: pnpm --filter types run generate:zod"